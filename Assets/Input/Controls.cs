//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""In-game"",
            ""id"": ""47f34408-e7fd-42c0-99fc-74eb70682d52"",
            ""actions"": [
                {
                    ""name"": ""PointerPlace"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0c7ff201-9339-4f16-992a-7eaa1a2644ba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPressed"",
                    ""type"": ""PassThrough"",
                    ""id"": ""48d63d45-7cb0-4424-b74f-ab641bd56d16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6fabc922-3b3a-463f-a2a5-abdb1301c180"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Computer"",
                    ""action"": ""PointerPlace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d5c9bfe-0282-4322-8b99-835b38d3b29d"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Telephone"",
                    ""action"": ""PointerPlace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""973bb1d6-ada7-493a-8984-1f8759a71f9b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Computer"",
                    ""action"": ""PointerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6928127d-19bc-40b3-9c52-638e31526b8b"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Telephone"",
                    ""action"": ""PointerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Computer"",
            ""bindingGroup"": ""Computer"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Telephone"",
            ""bindingGroup"": ""Telephone"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // In-game
        m_Ingame = asset.FindActionMap("In-game", throwIfNotFound: true);
        m_Ingame_PointerPlace = m_Ingame.FindAction("PointerPlace", throwIfNotFound: true);
        m_Ingame_PointerPressed = m_Ingame.FindAction("PointerPressed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // In-game
    private readonly InputActionMap m_Ingame;
    private List<IIngameActions> m_IngameActionsCallbackInterfaces = new List<IIngameActions>();
    private readonly InputAction m_Ingame_PointerPlace;
    private readonly InputAction m_Ingame_PointerPressed;
    public struct IngameActions
    {
        private @Controls m_Wrapper;
        public IngameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerPlace => m_Wrapper.m_Ingame_PointerPlace;
        public InputAction @PointerPressed => m_Wrapper.m_Ingame_PointerPressed;
        public InputActionMap Get() { return m_Wrapper.m_Ingame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngameActions set) { return set.Get(); }
        public void AddCallbacks(IIngameActions instance)
        {
            if (instance == null || m_Wrapper.m_IngameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngameActionsCallbackInterfaces.Add(instance);
            @PointerPlace.started += instance.OnPointerPlace;
            @PointerPlace.performed += instance.OnPointerPlace;
            @PointerPlace.canceled += instance.OnPointerPlace;
            @PointerPressed.started += instance.OnPointerPressed;
            @PointerPressed.performed += instance.OnPointerPressed;
            @PointerPressed.canceled += instance.OnPointerPressed;
        }

        private void UnregisterCallbacks(IIngameActions instance)
        {
            @PointerPlace.started -= instance.OnPointerPlace;
            @PointerPlace.performed -= instance.OnPointerPlace;
            @PointerPlace.canceled -= instance.OnPointerPlace;
            @PointerPressed.started -= instance.OnPointerPressed;
            @PointerPressed.performed -= instance.OnPointerPressed;
            @PointerPressed.canceled -= instance.OnPointerPressed;
        }

        public void RemoveCallbacks(IIngameActions instance)
        {
            if (m_Wrapper.m_IngameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngameActions instance)
        {
            foreach (var item in m_Wrapper.m_IngameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngameActions @Ingame => new IngameActions(this);
    private int m_ComputerSchemeIndex = -1;
    public InputControlScheme ComputerScheme
    {
        get
        {
            if (m_ComputerSchemeIndex == -1) m_ComputerSchemeIndex = asset.FindControlSchemeIndex("Computer");
            return asset.controlSchemes[m_ComputerSchemeIndex];
        }
    }
    private int m_TelephoneSchemeIndex = -1;
    public InputControlScheme TelephoneScheme
    {
        get
        {
            if (m_TelephoneSchemeIndex == -1) m_TelephoneSchemeIndex = asset.FindControlSchemeIndex("Telephone");
            return asset.controlSchemes[m_TelephoneSchemeIndex];
        }
    }
    public interface IIngameActions
    {
        void OnPointerPlace(InputAction.CallbackContext context);
        void OnPointerPressed(InputAction.CallbackContext context);
    }
}
